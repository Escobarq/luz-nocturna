package views

import (
	"fyne.io/systray"
	"luznocturna/luz-nocturna/internal/controllers"
	"luznocturna/luz-nocturna/internal/models"
)

/**
 * SystrayManager - Manejador del icono de bandeja del sistema
 * 
 * Controla el icono de la bandeja del sistema (system tray) proporcionando
 * acceso r√°pido a las funcionalidades principales sin abrir la ventana principal.
 * Incluye men√∫ contextual con presets, controles y informaci√≥n del estado.
 * 
 * @struct {SystrayManager}
 * @property {*controllers.NightLightController} controller - Controlador principal
 * @property {*NightLightView} mainView - Referencia a la vista principal (puede ser nil)
 * @property {*systray.MenuItem} applyItem - Item del men√∫ para aplicar
 * @property {*systray.MenuItem} resetItem - Item del men√∫ para resetear
 * @property {*systray.MenuItem} tempWarmItem - Preset de temperatura c√°lida
 * @property {*systray.MenuItem} tempNeutralItem - Preset de temperatura neutra
 * @property {*systray.MenuItem} tempCoolItem - Preset de temperatura fr√≠a
 * @property {*systray.MenuItem} tempDayItem - Preset de temperatura diurna
 * @property {*systray.MenuItem} showItem - Item para mostrar ventana principal
 * @property {*systray.MenuItem} quitItem - Item para salir de la aplicaci√≥n
 */
type SystrayManager struct {
	controller      *controllers.NightLightController
	mainView        *NightLightView
	applyItem       *systray.MenuItem
	resetItem       *systray.MenuItem
	tempWarmItem    *systray.MenuItem
	tempNeutralItem *systray.MenuItem
	tempCoolItem    *systray.MenuItem
	tempDayItem     *systray.MenuItem
	showItem        *systray.MenuItem
	quitItem        *systray.MenuItem
}

/**
 * NewSystrayManager - Constructor del manejador de bandeja
 * 
 * Crea una nueva instancia del manejador de bandeja del sistema.
 * La mainView puede ser nil si se ejecuta en modo solo-bandeja.
 * 
 * @param {*controllers.NightLightController} controller - Controlador principal
 * @param {*NightLightView} mainView - Vista principal (opcional, puede ser nil)
 * @returns {*SystrayManager} Nueva instancia del manejador
 * @example
 *   manager := NewSystrayManager(controller, mainView)
 *   manager.Start() // Iniciar bandeja (m√©todo bloqueante)
 */
func NewSystrayManager(controller *controllers.NightLightController, mainView *NightLightView) *SystrayManager {
	return &SystrayManager{
		controller: controller,
		mainView:   mainView,
	}
}

/**
 * Start - Inicia el sistema de bandeja del sistema
 * 
 * M√©todo bloqueante que inicializa y mantiene activa la bandeja del sistema.
 * Debe ejecutarse en el hilo principal o como goroutine seg√∫n el uso.
 * 
 * @example
 *   // Modo bloqueante (solo bandeja)
 *   manager.Start()
 *   
 *   // Como goroutine (con ventana principal)
 *   go manager.Start()
 */
func (s *SystrayManager) Start() {
	systray.Run(s.onReady, s.onExit)
}

/**
 * onReady - Callback ejecutado cuando la bandeja est√° lista
 * 
 * Inicializa el icono, tooltip, elementos del men√∫ y configura
 * los manejadores de eventos. Se ejecuta autom√°ticamente.
 * 
 * @callback - Evento interno de systray
 * @private
 */
func (s *SystrayManager) onReady() {
	// Configurar icono y informaci√≥n b√°sica
	systray.SetIcon(GetOptimalIcon()) // Usar icono optimizado seg√∫n el sistema
	systray.SetTitle("üåô Luz Nocturna")
	systray.SetTooltip("Control de temperatura de color - Clic para opciones")
	
	// Crear estructura del men√∫
	s.createMenuItems()
	
	// Configurar eventos de todos los elementos
	s.setupEventHandlers()
	
	// Sincronizar estado inicial
	s.updateMenuState()
}

/**
 * onExit - Callback ejecutado al cerrar la bandeja
 * 
 * Limpia recursos y realiza tareas de finalizaci√≥n.
 * Se ejecuta autom√°ticamente al salir.
 * 
 * @callback - Evento interno de systray
 * @private
 */
func (s *SystrayManager) onExit() {
	// Aqu√≠ podr√≠as agregar limpieza de recursos si fuera necesario
	// Por ejemplo: cerrar conexiones, guardar configuraci√≥n final, etc.
}

/**
 * createMenuItems - Crea todos los elementos del men√∫ contextual
 * 
 * Construye la estructura completa del men√∫ de la bandeja incluyendo:
 * - Informaci√≥n de estado actual
 * - Presets de temperatura r√°pidos
 * - Acciones principales (aplicar, reset)
 * - Controles de ventana y aplicaci√≥n
 * 
 * @private
 */
func (s *SystrayManager) createMenuItems() {
	config := s.controller.GetConfig()
	
	// === INFORMACI√ìN DE ESTADO ===
	statusItem := systray.AddMenuItem("üå°Ô∏è "+config.GetTemperatureString(), "Temperatura actual")
	statusItem.Disable() // Solo informativo
	
	systray.AddSeparator()
	
	// === PRESETS DE TEMPERATURA ===
	tempMenu := systray.AddMenuItem("üé® Presets de Temperatura", "Seleccionar temperatura predefinida")
	s.tempWarmItem = tempMenu.AddSubMenuItem("üïØÔ∏è C√°lida (3000K)", "Temperatura c√°lida para la noche")
	s.tempNeutralItem = tempMenu.AddSubMenuItem("‚òÄÔ∏è Neutra (4500K)", "Temperatura equilibrada")
	s.tempCoolItem = tempMenu.AddSubMenuItem("üå§Ô∏è Fr√≠a (5500K)", "Temperatura fr√≠a para el d√≠a")
	s.tempDayItem = tempMenu.AddSubMenuItem("‚òÄÔ∏è Diurna (6500K)", "Temperatura de luz natural")
	
	systray.AddSeparator()
	
	// === ACCIONES PRINCIPALES ===
	s.applyItem = systray.AddMenuItem("üî• Aplicar", "Aplicar temperatura actual al sistema")
	s.resetItem = systray.AddMenuItem("‚Ü∫ Reset", "Resetear a valores normales (6500K)")
	
	systray.AddSeparator()
	
	// === CONTROLES DE APLICACI√ìN ===
	if s.mainView != nil {
		s.showItem = systray.AddMenuItem("üì± Mostrar Ventana", "Abrir ventana principal")
		systray.AddSeparator()
	}
	
	// Informaci√≥n del sistema
	infoItem := systray.AddMenuItem("‚ÑπÔ∏è Informaci√≥n", "Informaci√≥n del sistema")
	infoItem.Disable()
	
	systray.AddSeparator()
	
	// === SALIR ===
	s.quitItem = systray.AddMenuItem("‚ùå Salir", "Cerrar aplicaci√≥n completamente")
}

/**
 * setupEventHandlers - Configura todos los manejadores de eventos del men√∫
 * 
 * Establece goroutines que escuchan los clicks en cada elemento del men√∫
 * y ejecutan las acciones correspondientes. Maneja concurrencia de forma segura.
 * 
 * @private
 */
func (s *SystrayManager) setupEventHandlers() {
	// === MANEJADORES DE PRESETS ===
	go func() {
		for {
			select {
			case <-s.tempWarmItem.ClickedCh:
				s.setTemperaturePreset(models.CandleLightTemp, "üïØÔ∏è C√°lida")
			case <-s.tempNeutralItem.ClickedCh:
				s.setTemperaturePreset(models.NeutralWhiteTemp, "‚òÄÔ∏è Neutra")
			case <-s.tempCoolItem.ClickedCh:
				s.setTemperaturePreset(models.CoolWhiteTemp, "üå§Ô∏è Fr√≠a")
			case <-s.tempDayItem.ClickedCh:
				s.setTemperaturePreset(models.DaylightTemp, "‚òÄÔ∏è Diurna")
			}
		}
	}()
	
	// === MANEJADORES DE ACCIONES PRINCIPALES ===
	go func() {
		for {
			select {
			case <-s.applyItem.ClickedCh:
				s.handleApplyAction()
			case <-s.resetItem.ClickedCh:
				s.handleResetAction()
			}
		}
	}()
	
	// === MANEJADORES DE CONTROLES DE APLICACI√ìN ===
	go func() {
		for {
			select {
			case <-s.showItem.ClickedCh:
				if s.mainView != nil {
					s.showMainWindow()
				}
			case <-s.quitItem.ClickedCh:
				systray.Quit()
				return
			}
		}
	}()
}

/**
 * setTemperaturePreset - Aplica un preset de temperatura espec√≠fico
 * 
 * Actualiza la temperatura en el controlador y sincroniza con la vista principal
 * si est√° disponible. Tambi√©n actualiza el estado del men√∫ de bandeja.
 * 
 * @param {float64} temp - Temperatura en Kelvin del preset
 * @param {string} name - Nombre descriptivo del preset para logging
 * @private
 */
func (s *SystrayManager) setTemperaturePreset(temp float64, name string) {
	s.controller.UpdateTemperature(temp)
	
	// Sincronizar con vista principal si existe
	if s.mainView != nil {
		s.mainView.temperatureSlider.Value = temp
		s.mainView.updateTemperatureDisplay()
	}
	
	// Actualizar tooltip de la bandeja
	s.updateMenuState()
	
	// Log para debug (podr√≠as usar un logger m√°s sofisticado)
	println("üìä Preset aplicado desde bandeja:", name, "->", fmt.Sprintf("%.0fK", temp))
}

/**
 * handleApplyAction - Maneja la acci√≥n de aplicar temperatura
 * 
 * Ejecuta la aplicaci√≥n de temperatura al sistema y actualiza el estado.
 * Maneja errores de forma silenciosa ya que no hay UI visible.
 * 
 * @private
 */
func (s *SystrayManager) handleApplyAction() {
	err := s.controller.ApplyNightLight()
	if err != nil {
		println("‚ö†Ô∏è Error al aplicar desde bandeja:", err.Error())
		return
	}
	
	s.updateMenuState()
	println("‚úÖ Temperatura aplicada desde bandeja")
}

/**
 * handleResetAction - Maneja la acci√≥n de reset
 * 
 * Resetea la configuraci√≥n a valores normales y actualiza la UI.
 * 
 * @private
 */
func (s *SystrayManager) handleResetAction() {
	err := s.controller.ResetNightLight()
	if err != nil {
		println("‚ö†Ô∏è Error al resetear desde bandeja:", err.Error())
		return
	}
	
	// Sincronizar con vista principal si existe
	if s.mainView != nil {
		config := s.controller.GetConfig()
		s.mainView.temperatureSlider.Value = config.Temperature
		s.mainView.updateTemperatureDisplay()
	}
	
	s.updateMenuState()
	println("‚Ü∫ Reseteado desde bandeja")
}

/**
 * updateMenuState - Actualiza el estado visual del men√∫ de bandeja
 * 
 * Sincroniza el tooltip y otros elementos visuales con el estado actual
 * de la configuraci√≥n. Se llama despu√©s de cambios de estado.
 * 
 * @private
 */
func (s *SystrayManager) updateMenuState() {
	config := s.controller.GetConfig()
	
	// Actualizar tooltip con informaci√≥n actual
	tooltip := "üåô Luz Nocturna - " + config.GetTemperatureString()
	if config.IsActive {
		tooltip += " (Activa)"
	} else {
		tooltip += " (Inactiva)"
	}
	
	systray.SetTooltip(tooltip)
}

/**
 * showMainWindow - Muestra y enfoca la ventana principal
 * 
 * Hace visible la ventana principal de la aplicaci√≥n y la trae al frente.
 * Solo funciona si mainView no es nil.
 * 
 * @private
 */
func (s *SystrayManager) showMainWindow() {
	if s.mainView != nil && s.mainView.window != nil {
		s.mainView.window.Show()
		s.mainView.window.RequestFocus()
		println("üì± Ventana principal mostrada desde bandeja")
	}
}
